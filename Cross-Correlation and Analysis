#NOT FINAL VERSION 

#CROSS AND AUTO CORRELATIONS
# Cross correlation for all four fields 
fields_advected = ['delta_dm_advected', 'delta_dm_squared_advected', 'nabla2_dm_advected', 's2_dm_advected', 'ones_dm_advected' ]

for field in fields_advected:
    result = calc_pk_from_deltak(delta_21_advected_fft, Lbox, k_bin_edges, mu_bin_edges, field2_fft=locals()[f"{field}_fft"])

    pk = result['power']
    Nmode = result['N_mode']
    binned_poles = result['binned_poles']
    N_mode_poles = result['N_mode_poles']
    k_avg = result['k_avg']
   
    np.savez(f"data/power_delta_21_{field}_snap{snap_int:d}.npz",pk=pk, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)
    print(f"Saved cross-correlation for {field} at snap {snap_int:d}")


# Autocorreletion for all four fields and delta_21 
fields_advected = ['delta_dm_advected', 'delta_dm_squared_advected', 'nabla2_dm_advected', 's2_dm_advected', 'delta_21_advected', 'ones_dm_advected']

for field in fields_advected:
    result = calc_pk_from_deltak(locals()[f"{field}_fft"], Lbox, k_bin_edges, mu_bin_edges)

    pk = result['power']
    Nmode = result['N_mode']
    binned_poles = result['binned_poles']
    N_mode_poles = result['N_mode_poles']
    k_avg = result['k_avg']

    np.savez(f"data/power_{field}_snap{snap_int:d}.npz", pk=pk, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)
    print(f"Saved auto-correlation for {field} at snap {snap_int:d}")


#ANALYSIS 
# loading delta_dm, delta_dm_squared, and nabla2_dm
snap = 40
data = np.load(f"data/power_delta_dm_advected_snap{snap}.npz")
pk_delta_dm_advected = data['pk']
data = np.load(f"data/power_delta_dm_squared_advected_snap{snap}.npz")
pk_delta_dm_squared_advected = data['pk']
data = np.load(f"data/power_nabla2_dm_advected_snap{snap}.npz")
pk_nabla2_dm_advected = data['pk']
data = np.load(f"data/power_s2_dm_advected_snap{snap}.npz")
pk_s2_dm_advected = data['pk']
data = np.load(f"data/power_ones_dm_advected_snap{snap}.npz")
pk_ones_dm_advected = data['pk']
data = np.load(f"data/power_delta_21_advected_snap{snap}.npz")
pk_delta_21 = data['pk']
k_avg = data['k_avg']


# redshifts = [8.3, 7.5, 7.0] 
# snap_ints = [40, 48, 54]  
redshifts = [8.3]
snap_ints = [40]

for redshift, snap_int in zip(redshifts, snap_ints):
    
    plt.figure()
    plt.title(f"Redshift {redshift}")
    
    # 1) pk_delta_21_delta_dm_advected
    data = np.load(f"data/power_delta_21_delta_dm_advected_snap{snap_int}.npz")
    pk_21_delta_dm_advected = data['pk']
    
    r_pk_21_delta_dm_advected = (pk_21_delta_dm_advected)/[(pk_delta_21*pk_delta_dm_advected)**(1/2)]
    r_pk_21_delta_dm_advected = r_pk_21_delta_dm_advected.flatten()
        
    plt.plot(k_avg, np.abs(r_pk_21_delta_dm_advected), label="delta_21, delta_dm_advected")
    plt.gca().axhline(y=1, ls='--', color='k')
   
     # 2) pk_delta_21_delta_dm_squared_advected
    data = np.load(f"data/power_delta_21_delta_dm_squared_advected_snap{snap_int}.npz")
    pk_delta_21_delta_dm_squared_advected = data['pk']
    
    r_pk_delta_21_delta_dm_squared_advected = (pk_delta_21_delta_dm_squared_advected)/[(pk_delta_21*pk_delta_dm_squared_advected)**(1/2)]
    r_pk_delta_21_delta_dm_squared_advected = r_pk_delta_21_delta_dm_squared_advected.flatten()
        
    plt.plot(k_avg, np.abs(r_pk_delta_21_delta_dm_squared_advected), label="delta_21, delta_dm_squared_advected")
        
     # 3) pk_delta_21_nabla_2_dm_advected
    data = np.load(f"data/power_delta_21_nabla2_dm_advected_snap{snap_int}.npz")
    pk_delta_21_nabla2_dm_advected = data['pk']
    
    r_pk_delta_21_nabla2_dm_advected = (pk_delta_21_nabla2_dm_advected)/[(pk_delta_21*pk_nabla2_dm_advected)**(1/2)]
    r_pk_delta_21_nabla2_dm_advected = r_pk_delta_21_nabla2_dm_advected.flatten()
        
    plt.plot(k_avg, np.abs(r_pk_delta_21_nabla2_dm_advected), label="delta_21, nabla2_dm_advected")        
    
     # 4) pk_delta_21_s2_dm_advected
    data = np.load(f"data/power_delta_21_s2_dm_advected_snap{snap_int}.npz")
    pk_delta_21_s2_dm_advected = data['pk']
     
    r_pk_delta_21_s2_dm_advected = (pk_delta_21_s2_dm_advected)/[(pk_delta_21*pk_s2_dm_advected)**(1/2)]
    r_pk_delta_21_s2_dm_advected = r_pk_delta_21_s2_dm_advected.flatten()
        
    plt.plot(k_avg, np.abs(r_pk_delta_21_s2_dm_advected), label="delta_21, s2_dm_advected")
    
     # 5) pk_delta_21_ones_dm_advected
    data = np.load(f"data/power_delta_21_ones_dm_advected_snap{snap_int}.npz")
    pk_delta_21_ones_dm_advected = data['pk']
     
    r_pk_delta_21_ones_dm_advected = (pk_delta_21_ones_dm_advected)/[(pk_delta_21*pk_ones_dm_advected)**(1/2)]
    r_pk_delta_21_ones_dm_advected = r_pk_delta_21_ones_dm_advected.flatten()
        
    plt.plot(k_avg, np.abs(r_pk_delta_21_ones_dm_advected), label="delta_21, ones_dm_advected")
    
        
    plt.legend()
    plt.xscale('log')
    # plt.yscale('log')
    plt.xlabel('k')
    plt.ylabel('r(k)')
    plt.ylim([0, 1.0])
