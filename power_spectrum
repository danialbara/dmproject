import abacusnbody
import abacusnbody.analysis
import numpy as np
import matplotlib.pyplot as plt
import sys
from scipy.fft import rfftn, irfftn
from abacusnbody.analysis.power_spectrum import calc_pk_from_deltak
import scipy as sp

def delta_growth_factor(z,omega_m0):
    a = 1/(z+1) #Scale factor
    w = -1 #EoS for the Dark Energy. We assume w=-1 for standard DE.
    omega_m = (omega_m0*a**(-3))/(omega_m0*a**(-3)+(1-omega_m0))

    delta =  a*sp.special.hyp2f1( (w-1)/(2*w) , -1/(3*w) ,
                               1- 5/(6*w),1 - 1/omega_m )

    return delta

def growth_factor(z,omega_m0=0.27):
    num = delta_growth_factor(z,omega_m0=omega_m0)
    den = delta_growth_factor(0,omega_m0=omega_m0)
    dz = num/den
    return dz

density_z1082 = np.load("/pscratch/sd/b/boryanah/Thesan/density_HI_083.npy")
delta_21_z1082 = density_z1082 / np.mean(density_z1082, dtype=np.float64) - 1.
np.save('/pscratch/sd/d/danialb/delta_21_snap83', delta_21_z1082)

density_dm = np.load("/pscratch/sd/b/boryanah/Thesan/density_000.npy")
delta_dm = density_dm / np.mean(density_dm, dtype=np.float64) - 1.

delta_dm_z1082 = delta_dm*growth_factor(10.82,omega_m0=0.3089)/growth_factor(20.00,omega_m0=0.3089)

k_bin_edges = np.linspace(0.08, 20, 101)
mu_bin_edges = np.array([0, 1.])
Lbox = 64691.7 / 1.e3  # cMpc/h

delta_21_z1082_fft = rfftn(delta_21_z1082, workers=-1) / delta_21_z1082.size

delta_dm_z1082_fft = rfftn(delta_dm_z1082, workers=-1) / delta_dm_z1082.size

result = calc_pk_from_deltak(delta_21_z1082_fft, Lbox, k_bin_edges, mu_bin_edges)

pk_21_z1082 = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_21.npz", pk_21_z1082=pk_21_z1082, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

result = calc_pk_from_deltak(delta_dm_z1082_fft, Lbox, k_bin_edges, mu_bin_edges)

pk_dm_z1082 = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_dm.npz", pk_dm_z1082=pk_dm_z1082, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

result = calc_pk_from_deltak(delta_21_z1082_fft, Lbox, k_bin_edges, mu_bin_edges, field2_fft=delta_dm_z1082_fft)

pk_21_z1082_dm = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_21_dm.npz",pk_21_z1082_dm=pk_21_z1082_dm, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

r_z1082 = (pk_21_z1082_dm)/[(pk_21_z1082*pk_dm_z1082)**(1/2)]
rf_z1082 = r_z1082.flatten()

k_bin_centers_z1082 = 0.5 * (k_bin_edges[1:] + k_bin_edges[:-1])
plt.plot(k_bin_centers_z1082, np.abs(rf_z1082))
plt.gca().axhline(y=1, ls='--', color='k')
plt.xscale('log')
# plt.yscale('log')
plt.xlabel('k')
plt.ylabel('r(k)')
plt.ylim([0, 1.0])
plt.title('r(k) vs. k at z = 10.82')
plt.show()

# 1b) Z = 10.82 - Finding the linear bias b(k) for z = 10.82
bk_z1082 = (pk_21_z1082/pk_dm_z1082)**(1/2)
k_bin_centers_z1082 = 0.5 * (k_bin_edges[1:] + k_bin_edges[:-1])
plt.plot(k_bin_centers_z1082, bk_z1082)
# plt.gca().axhline(y=1, ls='--', color='k')
plt.xscale('log')
# plt.yscale('log')
plt.xlabel('k')
plt.ylabel('b(k)')
plt.title('b(k) vs. k at z = 10.82')
plt.show()

# 2a) Z = 8.3 - Finding the cross correlation coefficient r(k) for z = 8.3

density_z83 = np.load("/pscratch/sd/b/boryanah/Thesan/density_HI_168.npy")
delta_21_z83 = density_z83 / np.mean(density_z83, dtype=np.float64) - 1.
np.save('/pscratch/sd/d/danialb/delta_21_snap168', delta_21_z83)

density_dm = np.load("/pscratch/sd/b/boryanah/Thesan/density_000.npy")
delta_dm = density_dm / np.mean(density_dm, dtype=np.float64) - 1.

delta_dm_z83 = delta_dm*growth_factor(8.3,omega_m0=0.3089)/growth_factor(20.00,omega_m0=0.3089)

k_bin_edges = np.linspace(0.08, 20, 101)
mu_bin_edges = np.array([0, 1.])
Lbox = 64691.7 / 1.e3  # cMpc/h

delta_21_z83_fft = rfftn(delta_21_z83, workers=-1) / delta_21_z83.size

delta_dm_z83_fft = rfftn(delta_dm_z83, workers=-1) / delta_dm_z83.size

# 1) pk_21_z8.3
result = calc_pk_from_deltak(delta_21_z83_fft, Lbox, k_bin_edges, mu_bin_edges)

pk_21_z83 = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_21.npz", pk_21_z83=pk_21_z83, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

# 2) pk_dm_z8.3
result = calc_pk_from_deltak(delta_dm_z83_fft, Lbox, k_bin_edges, mu_bin_edges)

pk_dm_z83 = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_dm.npz", pk_dm_z83=pk_dm_z83, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

# 3) pk_21_z8.3,dm
result = calc_pk_from_deltak(delta_21_z83_fft, Lbox, k_bin_edges, mu_bin_edges, field2_fft=delta_dm_z83_fft)

pk_21_z83_dm = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_21_dm.npz",pk_21_z83_dm=pk_21_z83_dm, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

r_z83 = (pk_21_z83_dm)/[(pk_21_z83*pk_dm_z83)**(1/2)]
rf_z83 = r_z83.flatten()

k_bin_centers_z83 = 0.5 * (k_bin_edges[1:] + k_bin_edges[:-1])
plt.plot(k_bin_centers_z83, np.abs(rf_z83))
# plt.gca().axhline(y=1, ls='--', color='k')
plt.xscale('log')
# plt.yscale('log')
plt.xlabel('k')
plt.ylabel('r(k)')
plt.ylim([0, 1.0])
plt.title('r(k) vs. k at z = 8.3')
plt.show()

# 2b) Z = 8.3 - Finding the linear bias b(k) for z = 8.3
bk_z83 = (pk_21_z83/pk_dm_z83)**(1/2)
k_bin_centers_z83 = 0.5 * (k_bin_edges[1:] + k_bin_edges[:-1])
plt.plot(k_bin_centers_z83, bk_z83)
# plt.gca().axhline(y=1, ls='--', color='k')
plt.xscale('log')
# plt.yscale('log')
plt.xlabel('k')
plt.ylabel('b(k)')
# plt.ylim([0, 1.0])
plt.title('b(k) vs. k at z = 8.3')
plt.show()

# 3a) Z = 7.5 - Finding the cross correlation coefficient r(k) for z = 7.5

density_z75 = np.load("/pscratch/sd/b/boryanah/Thesan/density_HI_209.npy")
delta_21_z75 = density_z75 / np.mean(density_z75, dtype=np.float64) - 1.
np.save('/pscratch/sd/d/danialb/delta_21_snap209', delta_21_z75)

density_dm = np.load("/pscratch/sd/b/boryanah/Thesan/density_000.npy")
delta_dm = density_dm / np.mean(density_dm, dtype=np.float64) - 1.

delta_dm_z75 = delta_dm*growth_factor(7.5,omega_m0=0.3089)/growth_factor(20.00,omega_m0=0.3089)

k_bin_edges = np.linspace(0.08, 20, 101)
mu_bin_edges = np.array([0, 1.])
Lbox = 64691.7 / 1.e3  # cMpc/h

delta_21_z75_fft = rfftn(delta_21_z75, workers=-1) / delta_21_z75.size

delta_dm_z75_fft = rfftn(delta_dm_z75, workers=-1) / delta_dm_z75.size

# 1) pk_21_z7.5
result = calc_pk_from_deltak(delta_21_z75_fft, Lbox, k_bin_edges, mu_bin_edges)

pk_21_z75 = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_21.npz", pk_21_z75=pk_21_z75, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

# 2) pk_dm_z75
result = calc_pk_from_deltak(delta_dm_z75_fft, Lbox, k_bin_edges, mu_bin_edges)

pk_dm_z75 = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_dm.npz", pk_dm_z75=pk_dm_z75, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

# 3) pk_21_z7.5,dm
result = calc_pk_from_deltak(delta_21_z75_fft, Lbox, k_bin_edges, mu_bin_edges, field2_fft=delta_dm_z75_fft)

pk_21_z75_dm = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_21_dm.npz",pk_21_z75_dm=pk_21_z75_dm, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

r_z75 = (pk_21_z75_dm)/[(pk_21_z75*pk_dm_z75)**(1/2)]
rf_z75 = r_z75.flatten()

k_bin_centers_z75 = 0.5 * (k_bin_edges[1:] + k_bin_edges[:-1])
plt.plot(k_bin_centers_z75, np.abs(rf_z75))
# plt.gca().axhline(y=1, ls='--', color='k')
plt.xscale('log')
# plt.yscale('log')
plt.xlabel('k')
plt.ylabel('r(k)')
plt.ylim([0, 1.0])
plt.title('r(k) vs. k at z = 7.5')
plt.show()

# 3b) Z = 7.5 - Finding the linear bias b(k) for z = 7.5
bk_z75 = (pk_21_z75/pk_dm_z75)**(1/2)
k_bin_centers_z75 = 0.5 * (k_bin_edges[1:] + k_bin_edges[:-1])
plt.plot(k_bin_centers_z75, bk_z75)
# plt.gca().axhline(y=1, ls='--', color='k')
plt.xscale('log')
# plt.yscale('log')
plt.xlabel('k')
plt.ylabel('b(k)')
plt.title('b(k) vs. k at z = 7.5')
plt.show()

# 4a) Z = 7.0 - Finding the cross correlation coefficient r(k) for z = 7.0

density_z70 = np.load("/pscratch/sd/b/boryanah/Thesan/density_HI_240.npy")
delta_21_z70 = density_z70 / np.mean(density_z70, dtype=np.float64) - 1.
np.save('/pscratch/sd/d/danialb/delta_21_snap240', delta_21_z70)

density_dm = np.load("/pscratch/sd/b/boryanah/Thesan/density_000.npy")
delta_dm = density_dm / np.mean(density_dm, dtype=np.float64) - 1.

delta_dm_z70 = delta_dm*growth_factor(7.0,omega_m0=0.3089)/growth_factor(20.00,omega_m0=0.3089)

k_bin_edges = np.linspace(0.08, 20, 101)
mu_bin_edges = np.array([0, 1.])
Lbox = 64691.7 / 1.e3  # cMpc/h

delta_21_z70_fft = rfftn(delta_21_z70, workers=-1) / delta_21_z70.size

delta_dm_z70_fft = rfftn(delta_dm_z70, workers=-1) / delta_dm_z70.size

# 1) pk_21_z7.0
result = calc_pk_from_deltak(delta_21_z70_fft, Lbox, k_bin_edges, mu_bin_edges)

pk_21_z70 = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_21.npz", pk_21_z70=pk_21_z70, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

# 2) pk_dm_z70
result = calc_pk_from_deltak(delta_dm_z70_fft, Lbox, k_bin_edges, mu_bin_edges)

pk_dm_z70 = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_dm.npz", pk_dm_z70=pk_dm_z70, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

# 3) pk_21_z7.0,dm
result = calc_pk_from_deltak(delta_21_z70_fft, Lbox, k_bin_edges, mu_bin_edges, field2_fft=delta_dm_z70_fft)

pk_21_z70_dm = result['power']
Nmode = result['N_mode']
binned_poles = result['binned_poles']
N_mode_poles = result['N_mode_poles']
k_avg = result['k_avg']

np.savez("power_21_dm.npz",pk_21_z70_dm=pk_21_z70_dm, k_bin_edges=k_bin_edges, Nmode=Nmode, k_avg=k_avg)

r_z70 = (pk_21_z70_dm)/[(pk_21_z70*pk_dm_z70)**(1/2)]
rf_z70 = r_z70.flatten()

k_bin_centers_z70 = 0.5 * (k_bin_edges[1:] + k_bin_edges[:-1])
plt.plot(k_bin_centers_z70, np.abs(rf_z70))
plt.gca().axhline(y=1, ls='--', color='k')
plt.xscale('log')
# plt.yscale('log')
plt.xlabel('k')
plt.ylabel('r(k)')
plt.ylim([0, 1.0])
plt.title('r(k) vs. k at z = 7.0')
plt.show()

# 4b) Z = 7.0 - Finding the linear bias b(k) for z = 7.0
bk_z70 = (pk_21_z70/pk_dm_z70)**(1/2)
k_bin_centers_z70 = 0.5 * (k_bin_edges[1:] + k_bin_edges[:-1])
plt.plot(k_bin_centers_z70, bk_z70)
# plt.gca().axhline(y=1, ls='--', color='k')
plt.xscale('log')
# plt.yscale('log')
plt.xlabel('k')
plt.ylabel('b(k)')
# plt.xlim([0.0,1.0])
plt.title('b(k) vs. k at z = 7.0')
plt.show()


